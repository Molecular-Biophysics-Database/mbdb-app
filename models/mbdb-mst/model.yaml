$defs:
  Assembly_component:
    discriminator: type
    help.en: Details about the assembly component
    schemas:
      Chemical:
        required: true
        use: '#/$defs/Chemical_Polymorphic'
      Polymer:
        required: true
        use: '#/$defs/Polymer_Polymorphic'
    type: polymorphic
  Assembly_component_base:
    properties:
      copy_number:
        help.en: Number of molecules of the component within the assembly, -1 if unknown
        minimum: -1.0
        type: double
      name:
        help.en: Short descriptive name (id) given to the assembly component. The
          name must be unique within a record
        type: keyword
      type:
        enum:
        - Polymer
        - Chemical
        help.en: The type of component, options are (biological) Polymer and Chemical
        type: keyword
  Associated_publications:
    properties:
      additional[]:
        ^help.en: Additional publications can be specified here, if applicable
        type: nested
        use: '#/$defs/Publication'
      main:
        use: '#/$defs/Publication'
  Atmosphere:
    properties:
      composition[]:
        ^help.en: List of gases and their concentrations the atmosphere was composed
          of
        ^minItems: 1
        mapping:
          type: nested
        type: polymorphic
        use: '#/$defs/Chemically_defined_constituent'
  Body_fluid:
    properties:
      fluid:
        enum:
        - Blood
        - Fecal matter
        - Milk
        - Plasma
        - Saliva
        - Serum
        - Urine
        - Plant extract
        - Other
        help.en: The body fluid the complex substance is derived from
        type: keyword
      health_status:
        help.en: Health status of the donor organism where the body fluid was derived
          from (e.g. healthy, sick, patient with Parkinson's Disease)
        type: keyword
  Body_fluid_Polymorphic:
    properties:
      additional_specifications[]:
        ^help.en: Additional information about the complex substance can be specified
          here
        type: keyword
      concentration:
        required: true
        use: '#/$defs/Concentration'
      derived_from:
        enum:
        - Body fluid
        - Cell fraction
        - Virion
        help.en: The biological substance the complex substance is derived from
        type: keyword
      description:
        help.en: Further description of the complex substance
        type: keyword
      fluid:
        enum:
        - Blood
        - Fecal matter
        - Milk
        - Plasma
        - Saliva
        - Serum
        - Urine
        - Plant extract
        - Other
        help.en: The body fluid the complex substance is derived from
        type: keyword
      health_status:
        help.en: Health status of the donor organism where the body fluid was derived
          from (e.g. healthy, sick, patient with Parkinson's Disease)
        type: keyword
      id:
        type: keyword
      name:
        help.en: Short descriptive name (id) of the constituent, must be unique within
          a record
        type: keyword
      organism:
        required: true
        use: '#/$defs/Organism'
      preparation_protocol[]:
        ^help.en: List of the steps performed during the preparation of the complex
          substance
        use: '#/$defs/Step'
      storage:
        use: '#/$defs/Storage'
      type:
        enum:
        - Polymer
        - Chemical
        - Molecular assembly
        - Complex substance of biological origin
        - Complex substance of environmental origin
        - Complex substance of chemical origin
        - Complex substance of industrial production origin
        help.en: The type of the constituent, options are Polymer, Chemical, and defined
          assembly
        type: keyword
  COMPANIES:
    enum:
    - Bio-Rad
    - Bruker
    - Cytiva
    - Gatorbio
    - GE Healthcare
    - Nanotemper
    - Nicoya Life
    - Sartorius
    - Malvern Panalytical
    - Refeyn
    - TA Instruments
    type: keyword
  CONCENTRATION_UNITS:
    enum:
    - M
    - mM
    - "\xB5M"
    - nM
    - pM
    - fM
    - aM
    - g/L
    - mg/mL
    - "\xB5g/mL"
    - ng/mL
    - mol/kg
    - mmol/kg
    - v/v %
    - w/w %
    - v/w %
    - w/v %
    - U/ml
    - '% saturated'
    type: keyword
  Cell_fraction:
    properties:
      celltype:
        help.en: The cell type the cell fraction was derived from
        type: keyword
      fraction:
        enum:
        - Ribosome
        - Cell wall
        - VesicleCell lysate/Cytoplasm
        - Cell Membrane
        - Extracellular matrix
        - Lysosome
        - Golgi Apparatus
        - Mitochondrion
        - Nucleus
        - Rough Endoplasmic Reticulum
        - Smooth Endoplasmic Reticulum
        - Vacuole
        - Chloroplast
        - Other
        help.en: The subcelluar component e.g. (Ribosome)
        type: keyword
      health_status:
        help.en: Health status of the donor organism where the cell fraction was derived
          from (e.g. healthy, sick, patient with Parkinson's Disease)
        type: keyword
      organ:
        help.en: The organ the cell fraction was derived from (e.g. heart)
        type: keyword
      tissue:
        help.en: The tissue type the cell fraction was derived from
        type: keyword
  Cell_fraction_Polymorphic:
    properties:
      additional_specifications[]:
        ^help.en: Additional information about the complex substance can be specified
          here
        type: keyword
      celltype:
        help.en: The cell type the cell fraction was derived from
        type: keyword
      concentration:
        required: true
        use: '#/$defs/Concentration'
      derived_from:
        enum:
        - Body fluid
        - Cell fraction
        - Virion
        help.en: The biological substance the complex substance is derived from
        type: keyword
      description:
        help.en: Further description of the complex substance
        type: keyword
      fraction:
        enum:
        - Ribosome
        - Cell wall
        - VesicleCell lysate/Cytoplasm
        - Cell Membrane
        - Extracellular matrix
        - Lysosome
        - Golgi Apparatus
        - Mitochondrion
        - Nucleus
        - Rough Endoplasmic Reticulum
        - Smooth Endoplasmic Reticulum
        - Vacuole
        - Chloroplast
        - Other
        help.en: The subcelluar component e.g. (Ribosome)
        type: keyword
      health_status:
        help.en: Health status of the donor organism where the cell fraction was derived
          from (e.g. healthy, sick, patient with Parkinson's Disease)
        type: keyword
      id:
        type: keyword
      name:
        help.en: Short descriptive name (id) of the constituent, must be unique within
          a record
        type: keyword
      organ:
        help.en: The organ the cell fraction was derived from (e.g. heart)
        type: keyword
      organism:
        required: true
        use: '#/$defs/Organism'
      preparation_protocol[]:
        ^help.en: List of the steps performed during the preparation of the complex
          substance
        use: '#/$defs/Step'
      storage:
        use: '#/$defs/Storage'
      tissue:
        help.en: The tissue type the cell fraction was derived from
        type: keyword
      type:
        enum:
        - Polymer
        - Chemical
        - Molecular assembly
        - Complex substance of biological origin
        - Complex substance of environmental origin
        - Complex substance of chemical origin
        - Complex substance of industrial production origin
        help.en: The type of the constituent, options are Polymer, Chemical, and defined
          assembly
        type: keyword
  Chemical:
    properties:
      additional_identifiers[]:
        ^help.en: Unique and persistent identifier from an external source; options
          of sources are CAS number, Pubchem Compound ID, and Pubchem Substance ID
        type: keyword
      additional_specifications[]:
        ^help.en: Additional information about the chemical can be specified here
          (e.g. RNase free water, recrystallization, desalting)
        type: keyword
      inchikey:
        help.en: '[InChIKey]() identifier of the chemical. In case of chemical polymers
          please specify the InChIKey of the monomer and specify the specific type
          in the additional identifiers'' field (e.g. if PEG 3350 was employed, the
          InChiKey of ethylene glycol, i.e. LYCAIKOWRPUZTN-UHFFFAOYSA-N should be
          specified here)'
        type: keyword
      isotopic_labeling:
        help.en: If the isotopic composition of the chemical was altered from the
          naturally occurring one, it can be specified here (e.g. 15N, 13C)
        type: keyword
      quality_controls[]:
        ^help.en: Quality controls performed e.g. purity, aggregation state etc.
        type: nested
        use: '#/$defs/Quality_control'
      supplier:
        use: '#/$defs/Supplier'
  Chemical_Polymorphic:
    properties:
      additional_identifiers[]:
        ^help.en: Unique and persistent identifier from an external source; options
          of sources are CAS number, Pubchem Compound ID, and Pubchem Substance ID
        type: keyword
      additional_specifications[]:
        ^help.en: Additional information about the chemical can be specified here
          (e.g. RNase free water, recrystallization, desalting)
        type: keyword
      copy_number:
        help.en: Number of molecules of the component within the assembly, -1 if unknown
        minimum: -1.0
        type: double
      id:
        type: keyword
      inchikey:
        help.en: '[InChIKey]() identifier of the chemical. In case of chemical polymers
          please specify the InChIKey of the monomer and specify the specific type
          in the additional identifiers'' field (e.g. if PEG 3350 was employed, the
          InChiKey of ethylene glycol, i.e. LYCAIKOWRPUZTN-UHFFFAOYSA-N should be
          specified here)'
        type: keyword
      isotopic_labeling:
        help.en: If the isotopic composition of the chemical was altered from the
          naturally occurring one, it can be specified here (e.g. 15N, 13C)
        type: keyword
      name:
        help.en: Short descriptive name (id) of the entity; must be unique within
          a record
        type: keyword
      quality_controls[]:
        ^help.en: Quality controls performed e.g. purity, aggregation state etc.
        type: nested
        use: '#/$defs/Quality_control'
      supplier:
        use: '#/$defs/Supplier'
      type:
        enum:
        - Polymer
        - Chemical
        - Molecular assembly
        - Complex substance of biological origin
        - Complex substance of environmental origin
        - Complex substance of chemical origin
        - Complex substance of industrial production origin
        help.en: The type of the entity, where the options are (biological) Polymer,
          Chemical, Molecular assembly or Complex substance. Chemical polymers such
          as PEG 5000 should be described as being a Chemical. Complex substance refers
          to substance which cannot be exactly specified as for its chemical composition,
          e.g. blood, serum, plant extract
        type: keyword
  Chemical_environment:
    id: chemical-environment
    properties:
      additional_specifications[]:
        ^help.en: Additional information about the chemical can be specified here
        type: keyword
      constituents[]:
        ^help.en: List of the constituents, excluding the solvent, that made up the
          chemical environment (i.e. buffer components etc.)
        mapping:
          type: nested
        type: polymorphic
        use: '#/$defs/Constituent'
      degassing_method:
        enum:
        - Low pressure
        - Heating
        - Sonication bath
        help.en: The method that was used for degasification of the chemical environment
        type: keyword
      dynamic_viscosity:
        use: '#/$defs/Dynamic_viscosity'
      id:
        type: keyword
      ionic_strength:
        use: '#/$defs/Ionic_strength'
      name:
        help.en: Name (id) given to the chemical environment. Must be unique within
          a record
        type: keyword
      pH:
        required: true
        use: '#/$defs/PH'
      solvent[]:
        ^help.en: The main components of the chemical solvent (e.g. H2O, D2O, DMSO,
          EtOH)
        mapping:
          type: nested
        type: polymorphic
        use: '#/$defs/Chemically_defined_constituent'
      ultrafiltration_method:
        use: '#/$defs/Ultrafiltration'
  Chemically_defined_constituent:
    discriminator: type
    help.en: The details about the chemically defined constituent i.e. of type Polymer,
      Chemical, and Molecular assembly
    schemas:
      Chemical:
        required: true
        use: '#/$defs/Chemical_Polymorphic'
      Molecular assembly:
        required: true
        use: '#/$defs/Molecular_assembly_Polymorphic'
      Polymer:
        required: true
        use: '#/$defs/Polymer_Polymorphic'
    type: polymorphic
  Chemically_defined_constituent_base:
    properties:
      concentration:
        required: true
        use: '#/$defs/Concentration'
      name:
        help.en: Short descriptive name (id) of the constituent, must be unique within
          a record
        type: keyword
      type:
        enum:
        - Polymer
        - Chemical
        - Molecular assembly
        help.en: The type of the constituent, options are Polymer, Chemical, and defined
          assembly
        type: keyword
  Complex_substance_of_biological_origin:
    discriminator: derived_from
    help.en: Information about the biological substance the complex substance is derived
      from
    schemas:
      Body fluid:
        required: true
        use: '#/$defs/Body_fluid_Polymorphic'
      Cell fraction:
        required: true
        use: '#/$defs/Cell_fraction_Polymorphic'
      Virion:
        required: true
        use: '#/$defs/Virion_Polymorphic'
    type: polymorphic
  Complex_substance_of_biological_origin_Polymorphic:
    discriminator: derived_from
    help.en: Information about the biological substance the complex substance is derived
      from
    schemas:
      Body fluid:
        required: true
        use: '#/$defs/Body_fluid_Polymorphic'
      Cell fraction:
        required: true
        use: '#/$defs/Cell_fraction_Polymorphic'
      Virion:
        required: true
        use: '#/$defs/Virion_Polymorphic'
    type: polymorphic
  Complex_substance_of_biological_origin_base:
    properties:
      additional_specifications[]:
        ^help.en: Additional information about the complex substance can be specified
          here
        type: keyword
      derived_from:
        enum:
        - Body fluid
        - Cell fraction
        - Virion
        help.en: The biological substance the complex substance is derived from
        type: keyword
      description:
        help.en: Further description of the complex substance
        type: keyword
      organism:
        required: true
        use: '#/$defs/Organism'
      preparation_protocol[]:
        ^help.en: List of the steps performed during the preparation of the complex
          substance
        use: '#/$defs/Step'
      storage:
        use: '#/$defs/Storage'
  Complex_substance_of_chemical_origin:
    properties:
      additional_specifications[]:
        ^help.en: Additional information about the complex substance can be specified
          here
        type: keyword
      class:
        enum:
        - Lipid_assembly
        help.en: The chemical origin where the complex substance was derived from
        type: keyword
      description:
        help.en: Further description of the complex substance
        type: keyword
      details:
        required: true
        use: '#/$defs/Lipid_assembly'
      preparation_protocol[]:
        ^help.en: List of the steps performed during the preparation of the complex
          substance
        use: '#/$defs/Step'
      storage:
        use: '#/$defs/Storage'
  Complex_substance_of_chemical_origin_Polymorphic:
    properties:
      additional_specifications[]:
        ^help.en: Additional information about the complex substance can be specified
          here
        type: keyword
      class:
        enum:
        - Lipid_assembly
        help.en: The chemical origin where the complex substance was derived from
        type: keyword
      description:
        help.en: Further description of the complex substance
        type: keyword
      details:
        required: true
        use: '#/$defs/Lipid_assembly'
      id:
        type: keyword
      name:
        help.en: Short descriptive name (id) of the entity; must be unique within
          a record
        type: keyword
      preparation_protocol[]:
        ^help.en: List of the steps performed during the preparation of the complex
          substance
        use: '#/$defs/Step'
      storage:
        use: '#/$defs/Storage'
      type:
        enum:
        - Polymer
        - Chemical
        - Molecular assembly
        - Complex substance of biological origin
        - Complex substance of environmental origin
        - Complex substance of chemical origin
        - Complex substance of industrial production origin
        help.en: The type of the entity, where the options are (biological) Polymer,
          Chemical, Molecular assembly or Complex substance. Chemical polymers such
          as PEG 5000 should be described as being a Chemical. Complex substance refers
          to substance which cannot be exactly specified as for its chemical composition,
          e.g. blood, serum, plant extract
        type: keyword
  Complex_substance_of_environmental_origin:
    properties:
      additional_specifications[]:
        ^help.en: Additional information about the complex substance can be specified
          here
        type: keyword
      description:
        help.en: Further description of the complex substance
        type: keyword
      location:
        required: true
        use: '#/$defs/Coordinates'
      preparation_protocol[]:
        ^help.en: List of the steps performed during the preparation of the complex
          substance
        use: '#/$defs/Step'
      source:
        enum:
        - Fresh water
        - Marine
        - Ice core
        - Sediment
        - Sewage
        - Soil
        - Other
        help.en: The environmental source where the complex substance was derived
          from
        type: keyword
      storage:
        use: '#/$defs/Storage'
  Complex_substance_of_environmental_origin_Polymorphic:
    properties:
      additional_specifications[]:
        ^help.en: Additional information about the complex substance can be specified
          here
        type: keyword
      description:
        help.en: Further description of the complex substance
        type: keyword
      id:
        type: keyword
      location:
        required: true
        use: '#/$defs/Coordinates'
      name:
        help.en: Short descriptive name (id) of the entity; must be unique within
          a record
        type: keyword
      preparation_protocol[]:
        ^help.en: List of the steps performed during the preparation of the complex
          substance
        use: '#/$defs/Step'
      source:
        enum:
        - Fresh water
        - Marine
        - Ice core
        - Sediment
        - Sewage
        - Soil
        - Other
        help.en: The environmental source where the complex substance was derived
          from
        type: keyword
      storage:
        use: '#/$defs/Storage'
      type:
        enum:
        - Polymer
        - Chemical
        - Molecular assembly
        - Complex substance of biological origin
        - Complex substance of environmental origin
        - Complex substance of chemical origin
        - Complex substance of industrial production origin
        help.en: The type of the entity, where the options are (biological) Polymer,
          Chemical, Molecular assembly or Complex substance. Chemical polymers such
          as PEG 5000 should be described as being a Chemical. Complex substance refers
          to substance which cannot be exactly specified as for its chemical composition,
          e.g. blood, serum, plant extract
        type: keyword
  Complex_substance_of_industrial_production_origin:
    properties:
      additional_specifications[]:
        ^help.en: Additional information about the complex substance can be specified
          here
        type: keyword
      description:
        help.en: Further descriptions of the complex substance
        type: keyword
      preparation_protocol[]:
        ^help.en: List of the steps performed during the preparation of the complex
          substance
        use: '#/$defs/Step'
      product:
        enum:
        - Beer
        - Cell medium
        - Whey
        - Other
        help.en: The type of product, byproduct, or waste product the complex substance
          was derived from
        type: keyword
      storage:
        use: '#/$defs/Storage'
  Complex_substance_of_industrial_production_origin_Polymorphic:
    properties:
      additional_specifications[]:
        ^help.en: Additional information about the complex substance can be specified
          here
        type: keyword
      description:
        help.en: Further descriptions of the complex substance
        type: keyword
      id:
        type: keyword
      name:
        help.en: Short descriptive name (id) of the entity; must be unique within
          a record
        type: keyword
      preparation_protocol[]:
        ^help.en: List of the steps performed during the preparation of the complex
          substance
        use: '#/$defs/Step'
      product:
        enum:
        - Beer
        - Cell medium
        - Whey
        - Other
        help.en: The type of product, byproduct, or waste product the complex substance
          was derived from
        type: keyword
      storage:
        use: '#/$defs/Storage'
      type:
        enum:
        - Polymer
        - Chemical
        - Molecular assembly
        - Complex substance of biological origin
        - Complex substance of environmental origin
        - Complex substance of chemical origin
        - Complex substance of industrial production origin
        help.en: The type of the entity, where the options are (biological) Polymer,
          Chemical, Molecular assembly or Complex substance. Chemical polymers such
          as PEG 5000 should be described as being a Chemical. Complex substance refers
          to substance which cannot be exactly specified as for its chemical composition,
          e.g. blood, serum, plant extract
        type: keyword
  Concentration:
    properties:
      obtained_by:
        use: '#/$defs/OBTAINED_TYPES'
      obtained_protocol[]:
        ^help.en: Information of how the concentration was obtained (e.g, Absorbance
          at 280 nm, buffer absorbance subtraction, extinction coefficient
        use: '#/$defs/Step'
      unit:
        required: true
        use: '#/$defs/CONCENTRATION_UNITS'
      value:
        help.en: The numerical value of the concentration, -1 if unknown
        minimum: -1.0
        type: double
      value_error:
        use: '#/$defs/Value_error'
  Constituent:
    discriminator: type
    help.en: The details about the constituent which can be of chemically well defined
      species of type Polymer, Chemical, Molecular assembly. Alternatively, if the
      constituent can only be defined in terms of a preparation protocol it should
      be described as a Complex substance of biological, environmental, chemical,
      or industrial production origin
    schemas:
      Chemical:
        required: true
        use: '#/$defs/Chemical_Polymorphic'
      Complex substance of biological origin:
        required: true
        use: '#/$defs/Complex_substance_of_biological_origin_Polymorphic'
      Complex substance of chemical origin:
        required: true
        use: '#/$defs/Complex_substance_of_chemical_origin_Polymorphic'
      Complex substance of environmental origin:
        required: true
        use: '#/$defs/Complex_substance_of_environmental_origin_Polymorphic'
      Complex substance of industrial production origin:
        required: true
        use: '#/$defs/Complex_substance_of_industrial_production_origin_Polymorphic'
      Molecular assembly:
        required: true
        use: '#/$defs/Molecular_assembly_Polymorphic'
      Polymer:
        required: true
        use: '#/$defs/Polymer_Polymorphic'
    type: polymorphic
  Constituent_base:
    properties:
      concentration:
        required: true
        use: '#/$defs/Concentration'
      name:
        help.en: Short descriptive name (id) of the constituent, must be unique within
          a record
        type: keyword
      type:
        enum:
        - Polymer
        - Chemical
        - Molecular assembly
        - Complex substance of biological origin
        - Complex substance of environmental origin
        - Complex substance of chemical origin
        - Complex substance of industrial production origin
        help.en: The type of the constituent, options are Polymer, Chemical, and defined
          assembly
        type: keyword
  Coordinates:
    properties:
      S-N(latitude):
        help.en: The latitude in degrees (decimal notation)
        maximum: 90.0
        minimum: -90.0
        type: double
      W-E(longitude):
        help.en: The longitude in degrees (decimal notation)
        maximum: 180.0
        minimum: -180.0
        type: double
  Data_fitting:
    properties:
      model:
        help.en: Description of the model(e.g. 1:1 binding)
        type: keyword
      quality:
        help.en: Numerical value representing the quality estimate of the derived
          parameter
        type: double
      quality_type:
        enum:
        - R^2
        - SEM
        - red. Chi^2
        - 1sigma
        - 2sigma
        - 3sigma
        - 5sigma
        - Skewness
        help.en: Type of the quality estimate
        type: keyword
      software_name:
        help.en: The name of the software that was used for doing the fitting (e.g.
          Excel)
        type: keyword
      software_version:
        help.en: The version of the software that was used for the step
        type: keyword
  Derived_parameter:
    id: derived-parameter
    properties:
      entities_involved[]:
        ^help.en: List of chemical or molecular assemblies the derived parameter describes
          and how many copies of each are involved
        ^minItems: 1
        type: nested
        use: '#/$defs/Entity_and_stoichiometry'
      id:
        type: keyword
      name:
        help.en: Descriptive name (id) of the parameter (e.g. Kd between Lysozyme
          and VHH). Must be unique with in a record
        type: keyword
      type:
        enum:
        - Concentration
        - Stoichiometry
        - Constant of association (K_A)
        - Constant of dissociation (K_D)
        - Association rate (k_on)
        - Dissociation rate (k_off)
        - Change in enthalpy (delta H)
        - Change in entropy (delta S)
        - Change in Gibbs free energy (delta G)
        - Molecular weight (MW)
        help.en: The type of physical parameter the derived parameter represents
        type: keyword
      unit:
        help.en: Unit of the derived parameter
        type: keyword
      value:
        help.en: Numerical value of the derived parameter
        type: double
      value_error:
        use: '#/$defs/Value_error'
  Dynamic_viscosity:
    properties:
      obtained_by:
        required: true
        use: '#/$defs/OBTAINED_TYPES'
      unit:
        enum:
        - Pa s
        help.en: The unit of the dynamic viscosity
        type: keyword
      value:
        help.en: Numerical value of the dynamic viscosity
        minimum: 0.0
        type: double
      value_error:
        use: '#/$defs/Value_error'
  Entity:
    discriminator: type
    help.en: Description of the entity which varies depending on the type of entity
    id: entity
    schemas:
      Chemical:
        required: true
        use: '#/$defs/Chemical_Polymorphic'
      Complex substance of biological origin:
        required: true
        use: '#/$defs/Complex_substance_of_biological_origin_Polymorphic'
      Complex substance of chemical origin:
        required: true
        use: '#/$defs/Complex_substance_of_chemical_origin_Polymorphic'
      Complex substance of environmental origin:
        required: true
        use: '#/$defs/Complex_substance_of_environmental_origin_Polymorphic'
      Complex substance of industrial production origin:
        required: true
        use: '#/$defs/Complex_substance_of_industrial_production_origin_Polymorphic'
      Molecular assembly:
        required: true
        use: '#/$defs/Molecular_assembly_Polymorphic'
      Polymer:
        required: true
        use: '#/$defs/Polymer_Polymorphic'
    type: polymorphic
  Entity_and_stoichiometry:
    properties:
      entity:
        keys:
        - id
        - name
        model: '#entity'
        type: relation
      stoichiometry:
        help.en: Number of copies of the entity that contribute to the derived parameter,
          -1 if unknown
        minimum: -1.0
        type: double
  Entity_base:
    id: entity
    properties:
      id:
        type: keyword
      name:
        help.en: Short descriptive name (id) of the entity; must be unique within
          a record
        type: keyword
      type:
        enum:
        - Polymer
        - Chemical
        - Molecular assembly
        - Complex substance of biological origin
        - Complex substance of environmental origin
        - Complex substance of chemical origin
        - Complex substance of industrial production origin
        help.en: The type of the entity, where the options are (biological) Polymer,
          Chemical, Molecular assembly or Complex substance. Chemical polymers such
          as PEG 5000 should be described as being a Chemical. Complex substance refers
          to substance which cannot be exactly specified as for its chemical composition,
          e.g. blood, serum, plant extract
        type: keyword
  Entity_constituent:
    properties:
      concentration:
        required: true
        use: '#/$defs/Concentration'
      entity:
        keys:
        - id
        - name
        model: '#entity'
        type: relation
  FILE_SIZE_UNITS:
    enum:
    - bytes (B)
    - kilobytes (kB)
    - megabytes (MB)
    - gigabytes (GB)
    - terabytes (TB)
    - kibibytes (KiB)
    - mebibytes (MiB)
    - gibibytes (GiB)
    - tebibytes (TiB)
    type: keyword
  F_cold_and_hot:
    properties:
      f_cold_end:
        help.en: Numerical value of the end point of time interval used to establish
          the initial fluorescence, F_cold
        minimum: -100.0
        type: double
      f_cold_start:
        help.en: Numerical value of the start point of time interval used to establish
          the initial fluorescence, F_cold
        minimum: -100.0
        type: double
      f_hot_end:
        help.en: Numerical value of the end point of time interval used to establish
          the fluorescence temperature induced change in fluorescence, F_hot
        minimum: 0.0
        type: double
      f_hot_start:
        help.en: Numerical value of the start point of time interval used to establish
          the fluorescence temperature induced change in fluorescence, F_hot
        minimum: 0.0
        type: double
      time_unit:
        required: true
        use: '#/$defs/TIME_UNITS'
  File:
    properties:
      description:
        help.en: Short description of what the file contains
        type: keyword
      name:
        help.en: Name of the file
        type: keyword
      processing_steps[]:
        ^help.en: List of the processing steps performed on the file before it was
          deposited (e.g. exported to xlsx)
        use: '#/$defs/Processing_step'
      recommended_software:
        help.en: The name of the software recommended for working with the file
        type: keyword
      size:
        required: true
        use: '#/$defs/File_size'
      source:
        enum:
        - Instrument software
        - User annotated
        - MBDB
        help.en: Which source generated the file
        type: keyword
      type:
        enum:
        - text
        - binary
        - text and binary
        help.en: Type of the file in terms of how it can be read (text, binary, etc.)
        type: keyword
  File_size:
    properties:
      unit:
        required: true
        use: '#/$defs/FILE_SIZE_UNITS'
      value:
        help.en: the numerical value of the size of the file
        minimum: 0.0
        type: double
  General_parameters:
    properties:
      associated_publications:
        use: '#/$defs/Associated_publications'
      chemical_information:
        properties:
          chemical_environments[]:
            ^help.en: Composition of the chemical environment (colloquially known
              as buffer) which are not being directly used to affect the behavior
              of the directly measured entities during the measurement
            ^minItems: 1
            type: nested
            use: '#/$defs/Chemical_environment'
          entities_of_interest[]:
            ^help.en: List of the entities that are being directly measured, as well
              as the entities that are being used as a variable to influence the behavior
              of the directly measured entities (e.g. lysozyme, NAG3, NaCl)
            ^minItems: 1
            mapping:
              type: nested
            type: polymorphic
            use: '#/$defs/Entity'
      depositors:
        properties:
          contributors[]:
            ^help.en: List of people who contributed to generating the deposited data,
              metadata, derived parameters, or the deposition itself
            type: nested
            use: '#/$defs/Person'
          depositor:
            required: true
            use: '#/$defs/Person'
          principal_contact:
            required: true
            use: '#/$defs/Person'
      derived_parameters[]:
        ^help.en: List of the parameters that were derived from analyzing the data,
          and which steps were used to obtain them
        type: nested
        use: '#/$defs/Derived_parameter'
      funding_reference[]:
        ^help.en: List of information about the grants that supported depositors
        use: '#/$defs/Grant'
      instrument:
        properties:
          manufacturer:
            required: true
            use: '#/$defs/COMPANIES'
          model:
            help.en: Model number and/or setup details of instrument used for raw
              data collection; include special instrument features (e.g. 10.1,RED/BLUE
              LASER, backreflection optics)
            type: keyword
          name:
            help.en: The name of the instrument as provided by the manufacturer
            type: keyword
          performance_test:
            use: '#/$defs/Performance_test'
      physical_environment_at_sample_handling:
        properties:
          atmosphere:
            use: '#/$defs/Atmosphere'
          humidity:
            use: '#/$defs/Humidity'
          pressure:
            use: '#/$defs/Pressure'
          temperature:
            use: '#/$defs/Temperature'
      raw_data_information:
        properties:
          collection_start_time:
            help.en: The time when collection of the data began
            type: date
          file_information[]:
            ^help.en: List of the files containing the raw data
            use: '#/$defs/File'
      record:
        properties:
          access_rights:
            enum:
            - open access
            - embargoed access
            - restricted access
            help.en: Access rights to the files
            type: keyword
          date_available:
            help.en: The date when the data was/will be made publicly available. Will
              be automatically generated
            type: date
          deposition_date:
            help.en: The date when the data was deposited; automatically generated
            type: date
          id:
            help.en: Unique and persistent identifier of a record, which is automatically
              generated upon deposition
            type: keyword
          identifier:
            help.en: DOI
            type: keyword
          keywords[]:
            ^help.en: List of keywords
            type: keyword
          measurement_group_id:
            help.en: Unique and persistent identifier which can be generated upon
              deposition of the first if a group of data is deposited at the same
              time
            type: keyword
          metadata_access_rights:
            enum:
            - open access
            - embargoed access
            - restricted access
            help.en: Access rights to the metadata
            type: keyword
          project:
            use: '#/$defs/Project'
          publisher:
            enum:
            - MBDB
            help.en: When made available MBDB is to be considered the publisher, however,
              the depositors are still the owners
            type: keyword
          resource_type:
            help.en: More specific type than "dataset"
            type: keyword
          resource_type_general:
            enum:
            - dataset
            help.en: All records are considered to be datasets
            type: keyword
          subject_category:
            help.en: subject category, default is Biophysics
            type: keyword
          title:
            help.en: Short descriptive title of the record
            type: keyword
          version:
            help.en: The version of the metadata+data
            type: keyword
      technique:
        required: true
        use: '#/$defs/SUPPORTED_TECHNIQUES'
  Grant:
    properties:
      award_number:
        help.en: The number or unique identifier of the grant, if applicable
        type: keyword
      funder_name:
        help.en: The agency that supplied the funding (e.g. European Research Council,
          Wellcome Trust, Michael J. Fox Foundation etc.
        type: keyword
      funding_program:
        help.en: The program at the funding agency the grant was a part of (e.g. ERC
          Consolidator, Simons Collaboration on the Origins of Life,  etc.), if applicable
        type: keyword
  HUMIDITY_UNITS:
    enum:
    - '%'
    - g/m^3
    - oz/y^3
    type: keyword
  Humidity:
    properties:
      controlled:
        help.en: Whether the humidity was actively controlled
        type: boolean
      obtained_by:
        required: true
        use: '#/$defs/OBTAINED_TYPES'
      unit:
        required: true
        use: '#/$defs/HUMIDITY_UNITS'
      value:
        help.en: Numeric value of the humidity
        type: double
      value_error:
        use: '#/$defs/Value_error'
  Ionic_strength:
    properties:
      unit:
        required: true
        use: '#/$defs/CONCENTRATION_UNITS'
      value:
        help.en: The numerical value of the ionic strength
        minimum: 0.0
        type: double
  LENGTH_UNITS:
    enum:
    - "\xC5"
    - nm
    - "\u03BCm"
    - mm
    - cm
    - m
    type: keyword
  Lipid_assembly:
    properties:
      additional_specifications[]:
        ^help.en: Additional information about the lipid assembly, if applicable
        use: '#/$defs/Step'
      components[]:
        ^help.en: The components of the lipid assembly
        mapping:
          type: nested
        type: polymorphic
        use: '#/$defs/Assembly_component'
      number_of_mono_layers:
        help.en: The number of lipid mono layers in the lipid assembly, -1 if unknown
        minimum: -1
        type: integer
      size:
        required: true
        use: '#/$defs/Size'
      type:
        enum:
        - Micelle
        - Liposome
        - Nanodisc
        - Sheet
        - Other
        help.en: The type of lipid assembly
        type: keyword
  MST_data_analysis:
    properties:
      data_fitting:
        required: true
        use: '#/$defs/Data_fitting'
      data_processing_steps[]:
        ^help.en: Describe the steps in the data analysis prior to fitting (removing
          outliers in the raw data, applying data filter, placing data at same start
          time etc. )
        use: '#/$defs/Processing_step'
      derived_parameter:
        keys:
        - id
        - name
        model: '#derived-parameter'
        type: relation
      f_cold_and_hot:
        use: '#/$defs/F_cold_and_hot'
  Measured_data_series:
    properties:
      id:
        help.en: Unique ID for the measured data to be used as a link
        type: uuid
      name:
        help.en: Short descriptive name of the data series
        type: keyword
      unit:
        help.en: The numerical values of the data series
        type: keyword
      values[]:
        ^help.en: The numerical values of the data series
        type: double
  Measurement:
    properties:
      measured_data:
        properties:
          x_data:
            required: true
            use: '#/$defs/Measured_data_series'
          y_data:
            required: true
            use: '#/$defs/Measured_data_series'
      name:
        help.en: Name (id) of the measurement which must be unique within a record
          (i.e. triplicates must be named individually in the raw data file). The
          name must allow location of the measurement data within the raw data file
          as well as processed data files if these are present
        type: keyword
      position:
        help.en: Position of the measured sample within the instrument
        type: keyword
      sample:
        required: true
        use: '#/$defs/Sample'
  Modification:
    properties:
      modification:
        help.en: The type of modification
        type: keyword
      monomer_position:
        help.en: The numeric position of the monomer where the modification occurs
        type: integer
      protocol[]:
        ^help.en: List of steps the that led to the modification taking place
        use: '#/$defs/Step'
  Molecular_assembly:
    properties:
      additional_specifications[]:
        ^help.en: Additional information about the macromolecular assembly can be
          specified here
        type: keyword
      chemical_modifications[]:
        ^help.en: List describing deliberate modifications made to the molecular assembly
          through chemical, biochemical, or physical means
        type: nested
        use: '#/$defs/Modification'
      components[]:
        ^help.en: Description of the individual components (e.g. polypeptide, heme,
          lipids, metal ions etc.) the molecular assembly is composed of (e.g. Hemoglobin
          alpha) and how many copies of each component were present
        ^minItems: 1
        mapping:
          type: nested
        type: polymorphic
        use: '#/$defs/Assembly_component'
      external_databases[]:
        ^help.en: List of identifiers to records in external databases containing
          information about the molecular assembly as a whole can be specified here
          (e.g. 1YQ2; PDB); information about the individual components should be
          specified in the details of the individual components
        type: keyword
      preparation_protocol[]:
        ^help.en: The protocol used for preparing the molecular assembly
        use: '#/$defs/Step'
      quality_controls[]:
        ^help.en: Quality controls performed e.g. purity, aggregation state etc.
        type: nested
        use: '#/$defs/Quality_control'
      supplier:
        use: '#/$defs/Supplier'
  Molecular_assembly_Polymorphic:
    properties:
      additional_specifications[]:
        ^help.en: Additional information about the macromolecular assembly can be
          specified here
        type: keyword
      chemical_modifications[]:
        ^help.en: List describing deliberate modifications made to the molecular assembly
          through chemical, biochemical, or physical means
        type: nested
        use: '#/$defs/Modification'
      components[]:
        ^help.en: Description of the individual components (e.g. polypeptide, heme,
          lipids, metal ions etc.) the molecular assembly is composed of (e.g. Hemoglobin
          alpha) and how many copies of each component were present
        ^minItems: 1
        mapping:
          type: nested
        type: polymorphic
        use: '#/$defs/Assembly_component'
      external_databases[]:
        ^help.en: List of identifiers to records in external databases containing
          information about the molecular assembly as a whole can be specified here
          (e.g. 1YQ2; PDB); information about the individual components should be
          specified in the details of the individual components
        type: keyword
      id:
        type: keyword
      name:
        help.en: Short descriptive name (id) of the entity; must be unique within
          a record
        type: keyword
      preparation_protocol[]:
        ^help.en: The protocol used for preparing the molecular assembly
        use: '#/$defs/Step'
      quality_controls[]:
        ^help.en: Quality controls performed e.g. purity, aggregation state etc.
        type: nested
        use: '#/$defs/Quality_control'
      supplier:
        use: '#/$defs/Supplier'
      type:
        enum:
        - Polymer
        - Chemical
        - Molecular assembly
        - Complex substance of biological origin
        - Complex substance of environmental origin
        - Complex substance of chemical origin
        - Complex substance of industrial production origin
        help.en: The type of the entity, where the options are (biological) Polymer,
          Chemical, Molecular assembly or Complex substance. Chemical polymers such
          as PEG 5000 should be described as being a Chemical. Complex substance refers
          to substance which cannot be exactly specified as for its chemical composition,
          e.g. blood, serum, plant extract
        type: keyword
  OBTAINED_TYPES:
    enum:
    - Measurement
    - Calculation
    - Assumption
    - Other
    type: keyword
  Organism:
    properties:
      additional_taxonomic_information[]:
        ^help.en: List of taxonomic ranks the organism belongs to
        type: nested
        use: '#/$defs/Taxa'
      ncbi_taxid:
        help.en: The [NCBI](taxid) of the organism to the lowest taxonomic rank available,
          i.e. strain (e.g. 469008 which corresponds to Escherichia coli BL21(DE3))
        type: keyword
  PH:
    properties:
      obtained_by:
        required: true
        use: '#/$defs/OBTAINED_TYPES'
      value:
        help.en: The pH value of the solution
        type: double
      value_error:
        use: '#/$defs/Value_error'
  PRESSURE_UNITS:
    enum:
    - Pa
    - kPa
    - MPa
    - Bar
    - mBar
    - atm
    - Torr
    - PSI
    - mmHg
    - inchHg
    type: keyword
  Performance_test:
    properties:
      additional_information:
        help.en: Additional information about the performance test can be specified
          here
        type: keyword
      published_test_protocol:
        use: '#/$defs/Publication'
      report:
        required: true
        use: '#/$defs/File'
      sample_composition[]:
        ^help.en: The composition of the sample the performance test was carried out
          on
        mapping:
          type: nested
        type: polymorphic
        use: '#/$defs/Constituent'
  Person:
    properties:
      affiliations[]:
        ^help.en: The affiliation of the person
        type: keyword
      full_name:
        help.en: The full name of the person
        type: keyword
      identifiers[]:
        ^help.en: Persistent identifier associated with the publication
        type: keyword
  Polymer:
    properties:
      additional_specifications[]:
        ^help.en: Additional information about the polymer can be specified here
        type: keyword
      expression_organism:
        use: '#/$defs/Organism'
      expression_source_type:
        enum:
        - Isolated
        - Recombinantly
        - Synthetically
        help.en: How the polymer was produced
        type: keyword
      external_databases[]:
        ^help.en: List of identifiers to records in external databases containing
          information about the polymer can be specified here (e.g Q8KRF6, UniProt)
        type: keyword
      modifications:
        use: '#/$defs/Polymer_modifications'
      organism:
        required: true
        use: '#/$defs/Organism'
      polymer_type:
        enum:
        - cyclic-pseudo-peptide
        - peptide nucleic acid
        - polydeoxyribonucleotide
        - polydeoxyribonucleotide/polyribonucleotide hybrid
        - polypeptide(D)
        - polypeptide(L)
        - polyribonucleotide
        - Other
        help.en: The type of polymer (e.g. polypeptide(L))
        type: keyword
      quality_controls[]:
        ^help.en: Quality controls performed e.g. purity, aggregation state etc.
        type: nested
        use: '#/$defs/Quality_control'
      sequence:
        help.en: Primary sequence of the polymer, using single letter codes, including
          variant (e.g. SAGRELLE, AGTTA,). For non-natural see link for nomenclature
        type: keyword
      supplier:
        use: '#/$defs/Supplier'
      variant:
        help.en: Descriptive name indicating differences of primary sequence of the
          polymer as compared to the most common form, or wildtype, including mutations,
          purification tags, etc. (A53T, C-terminal GFP, N-terminal 6xHis-tag)
        type: keyword
  Polymer_Polymorphic:
    properties:
      additional_specifications[]:
        ^help.en: Additional information about the polymer can be specified here
        type: keyword
      copy_number:
        help.en: Number of molecules of the component within the assembly, -1 if unknown
        minimum: -1.0
        type: double
      expression_organism:
        use: '#/$defs/Organism'
      expression_source_type:
        enum:
        - Isolated
        - Recombinantly
        - Synthetically
        help.en: How the polymer was produced
        type: keyword
      external_databases[]:
        ^help.en: List of identifiers to records in external databases containing
          information about the polymer can be specified here (e.g Q8KRF6, UniProt)
        type: keyword
      id:
        type: keyword
      modifications:
        use: '#/$defs/Polymer_modifications'
      name:
        help.en: Short descriptive name (id) of the entity; must be unique within
          a record
        type: keyword
      organism:
        required: true
        use: '#/$defs/Organism'
      polymer_type:
        enum:
        - cyclic-pseudo-peptide
        - peptide nucleic acid
        - polydeoxyribonucleotide
        - polydeoxyribonucleotide/polyribonucleotide hybrid
        - polypeptide(D)
        - polypeptide(L)
        - polyribonucleotide
        - Other
        help.en: The type of polymer (e.g. polypeptide(L))
        type: keyword
      quality_controls[]:
        ^help.en: Quality controls performed e.g. purity, aggregation state etc.
        type: nested
        use: '#/$defs/Quality_control'
      sequence:
        help.en: Primary sequence of the polymer, using single letter codes, including
          variant (e.g. SAGRELLE, AGTTA,). For non-natural see link for nomenclature
        type: keyword
      supplier:
        use: '#/$defs/Supplier'
      type:
        enum:
        - Polymer
        - Chemical
        - Molecular assembly
        - Complex substance of biological origin
        - Complex substance of environmental origin
        - Complex substance of chemical origin
        - Complex substance of industrial production origin
        help.en: The type of the entity, where the options are (biological) Polymer,
          Chemical, Molecular assembly or Complex substance. Chemical polymers such
          as PEG 5000 should be described as being a Chemical. Complex substance refers
          to substance which cannot be exactly specified as for its chemical composition,
          e.g. blood, serum, plant extract
        type: keyword
      variant:
        help.en: Descriptive name indicating differences of primary sequence of the
          polymer as compared to the most common form, or wildtype, including mutations,
          purification tags, etc. (A53T, C-terminal GFP, N-terminal 6xHis-tag)
        type: keyword
  Polymer_modifications:
    properties:
      biological_postprocessing[]:
        ^help.en: Modifications of the polymer made after synthesis (e.g. posttranslational
          modifications, DNA methylation) by the organism where synthesis occurred
          (e.g. glycosylation)
        type: nested
        use: '#/$defs/Modification'
      chemical[]:
        ^help.en: Modifications of the polymer introduced by chemical, biochemical,
          or physical means in vitro (e.g. lysine methylation, cysteine iodoacetamide
          labeling, deglycosylation, covalent fluorescent labeling)
        type: nested
        use: '#/$defs/Modification'
      synthesis[]:
        ^help.en: Modifications (e.g. non-natural amino acids) of the polymer made
          during synthesis (e.g. translation) of the polymer
        type: nested
        use: '#/$defs/Modification'
  Pressure:
    properties:
      controlled:
        help.en: Whether the pressure was actively controlled
        type: boolean
      obtained_by:
        required: true
        use: '#/$defs/OBTAINED_TYPES'
      unit:
        required: true
        use: '#/$defs/PRESSURE_UNITS'
      value:
        help.en: Numeric value of the pressure
        type: double
      value_error:
        use: '#/$defs/Value_error'
  Processing_step:
    properties:
      description:
        help.en: Description of what the processing step was
        type: keyword
      link_to_source_code:
        help.en: If processing was performed with software where the source code is
          legally available a link can be specified here (e.g. self-written python
          script in a GitHub repository
        type: keyword
      name:
        help.en: Descriptive name of the processing step
        type: keyword
      software_name:
        help.en: The name of the software that was used for the step (e.g. Excel)
        type: keyword
      software_tool:
        help.en: The name of the tool within the specified software, i.e. a particular
          method called or "button pressed" (e.g. equation solver, buffer subtraction)
        type: keyword
      software_version:
        help.en: The version of the software that was used for the step
        type: keyword
  Project:
    properties:
      description:
        help.en: Description of the project
        type: keyword
      id:
        help.en: Unique and persistent identifier which can be generated upon deposition
          of the first member of the project, which can be used to show a relation
          to other data within the MBDB
        type: keyword
      owner:
        required: true
        use: '#/$defs/Person'
      title:
        help.en: Short title of the project
        type: keyword
  Publication:
    properties:
      authors[]:
        ^help.en: The authors of the publication
        type: nested
        use: '#/$defs/Person'
      pid:
        help.en: Persistent identifier associated with the publication
        type: keyword
      publication_year:
        help.en: The publication year
        minimum: 1800
        type: integer
      publisher:
        help.en: The name of the publisher
        type: keyword
      resource_type:
        enum:
        - Article
        - Book
        - Thesis
        help.en: The type of publication
        type: keyword
      title:
        help.en: The title of the publication
        type: keyword
  Quality_control:
    properties:
      parameter:
        enum:
        - aggregation state
        - homogeneity
        - identity
        - purity
        - stability
        - Other
        help.en: Which aspect was targeted by the quality control (e.g. purity, stability,
          homogeneity, identity, aggregation state)
        type: keyword
      report:
        required: true
        use: '#/$defs/File'
      storage_from_QC_to_measurement:
        required: true
        use: '#/$defs/Storage'
      technique:
        help.en: Which technique was used (e.g. SDS-PAGE MALDI-TOF, DLS, etc.)
        type: keyword
  SUPPORTED_TECHNIQUES:
    enum:
    - Bio-layer interferometry (BLI)
    - Surface plasmon resonance (SPR)
    - Mass Photometry (MP)
    - Isothermal titration calorimetry (ITC)
    - Microscale thermophoresis/Temperature related intensity change (MST/TRIC)
    type: keyword
  Sample:
    properties:
      chemical_environment:
        keys:
        - id
        - name
        model: '#chemical-environment'
        type: relation
      container:
        enum:
        - Monolith Standard Capillary
        - Monolith Premium Capillary
        - Monolith LabelFree Capillary
        - Monolith LabelFree Premium Capillary
        - Monolith NT.Automated Capillary Chip
        - Monolith NT.Automated Premium Capillary Chip
        - Monolith NT.Automated LabelFree Capillary Chip
        - Monolith NT.Automated LabelFree Premium Capillary Chip
        - 384-well plate
        - other
        help.en: The container the sample was in
        type: keyword
      ligands[]:
        ^help.en: List of names (ids) of entities (from the entities of interest defined
          in the general parameters) that were used to alter the behavior of the target(s)
          or entities present at varying concentrations for a series of measurements
          and their concentration
        use: '#/$defs/Entity_constituent'
      preparation[]:
        ^help.en: List of steps taken to prepare the sample
        use: '#/$defs/Step'
      targets[]:
        ^help.en: List of names (ids), from the entities of interest defined in the
          general parameters, of directly measured entities and entities at constant
          concentration for a series of measurements and their concentration
        ^minItems: 1
        use: '#/$defs/Entity_constituent'
  Size:
    properties:
      distribution_type:
        help.en: The distribution type of sizes (e.g. log-normal)
        type: keyword
      lower:
        help.en: The lower bound of the size
        type: double
      mean:
        help.en: The mean of the size
        minimum: 0.0
        type: double
      median:
        help.en: The median of the size
        minimum: 0.0
        type: double
      type:
        enum:
        - radius
        - diameter
        - path length
        - Other
        help.en: The type of size (e.g. radius)
        type: keyword
      unit:
        required: true
        use: '#/$defs/LENGTH_UNITS'
      upper:
        help.en: The upper bound of the size
        type: double
  Step:
    properties:
      description:
        help.en: Short description of the step
        type: keyword
      name:
        help.en: Descriptive name of the step
        type: keyword
  Storage:
    properties:
      duration:
        use: '#/$defs/Time_duration'
      storage_preparation[]:
        ^help.en: The specific steps that were taken to prepare the samples for storage
          (e.g. flash freezing in liquid nitrogen), if applicable
        use: '#/$defs/Step'
      temperature:
        required: true
        use: '#/$defs/Temperature'
  Supplier:
    properties:
      catalog_number:
        help.en: The catalog number or identifier of the item
        type: keyword
      further_information[]:
        ^help.en: Further information e.g. batch number
        type: keyword
      name:
        help.en: Name of the supplier
        type: keyword
  TEMPERATURE_UNITS:
    enum:
    - K
    - "\xB0C"
    - "\xB0F"
    type: keyword
  TIME_UNITS:
    enum:
    - nanoseconds
    - microseconds
    - milliseconds
    - seconds
    - minutes
    - hours
    - days
    type: keyword
  Taxa:
    properties:
      class:
        help.en: Class that the organism belongs to
        type: keyword
      domain:
        help.en: Domain that the organism belongs to. Note that if the organism is
          a virus it the highest level is realm rather than domain
        type: keyword
      genus:
        help.en: Genus that the organism belongs to
        type: keyword
      kingdom:
        help.en: Kingdom that the organism belongs to
        type: keyword
      order:
        help.en: Order that the organism belongs to
        type: keyword
      phylum:
        help.en: Phylum that the organism belongs to
        type: keyword
      realm:
        help.en: Realm that the virus(!) belongs to. Note that realm only applies
          if the organism is a virus
        type: keyword
      species:
        help.en: Species that the organism belongs to
        type: keyword
      strain:
        help.en: Strain that the organism belongs to
        type: keyword
  Temperature:
    properties:
      controlled:
        help.en: Whether the temperature was actively controlled
        type: boolean
      obtained_by:
        required: true
        use: '#/$defs/OBTAINED_TYPES'
      operational_value:
        enum:
        - Room temperature
        - On Ice
        - Other
        help.en: If the temperature was defined by the procedure rather than the numerical
          value the value can be specified here (e.g. Room temperature, on ice, etc.)
        type: keyword
      unit:
        required: true
        use: '#/$defs/TEMPERATURE_UNITS'
      value:
        help.en: Numeric value of the temperature
        type: double
      value_error:
        use: '#/$defs/Value_error'
  Time_duration:
    properties:
      unit:
        required: true
        use: '#/$defs/TIME_UNITS'
      value:
        help.en: Numerical value of the time point or duration
        minimum: 0.0
        type: double
      value_error:
        use: '#/$defs/Value_error'
  Ultrafiltration:
    properties:
      filter_material:
        enum:
        - Polyethersulfone (PES)
        - Polyvinylidene flouride (PVDF)
        - Cellulose acetate (CA)
        - Composite regenerated cellulose (CRC)
        - Microporous Glass Fiber (MGF)
        - Nylon
        - Polytetrafluoroethylene (PTFE)
        - Hydrophilic Polytetrafluoroethylene (PTFE)
        - Mixed cellulose ester (MCE)
        - Polypropylene (PP)
        help.en: The material the filter was composed of
        type: keyword
      pore_size:
        enum:
        - "0.2 \xB5m"
        - "0.22 \xB5m"
        - "0.45 \xB5m"
        - "0.5 \xB5m"
        - "1.2 \xB5m"
        - Other
        help.en: The pore size of the filter
        type: keyword
  Value_error:
    properties:
      error_level:
        help.en: How many standard deviations the error corresponds to
        minimum: 0.0
        type: double
      errors_are_relative:
        help.en: Whether the errors should be interpreted as relative errors in percent
        type: boolean
      lower_error:
        help.en: The lower error, i.e. the number subtracted from the parameter value
        type: double
      upper_error:
        help.en: The upper error, i.e. the number added to the parameter value
        type: double
  Virion:
    properties:
      Genetic_material:
        enum:
        - No genetic material
        - Virus genome
        - Synthetic
        - Other
        help.en: The genetic material carried by the virions (None, virus genome,
          synthetic)
        type: keyword
      capsid_type:
        enum:
        - None
        - Native
        - Genetically Engineered
        - Synthetic
        - Other
        help.en: The type of virion capsid (e.g. genetically engineered, None
        type: keyword
      envelope_type:
        enum:
        - None
        - Native
        - Genetically Engineered
        - Synthetic
        - Other
        help.en: The type of virion envelope (e.g. genetically engineered, None
        type: keyword
      host_cell_type:
        help.en: The host cell type the virion was produced in
        type: keyword
      host_organism:
        required: true
        use: '#/$defs/Organism'
  Virion_Polymorphic:
    properties:
      Genetic_material:
        enum:
        - No genetic material
        - Virus genome
        - Synthetic
        - Other
        help.en: The genetic material carried by the virions (None, virus genome,
          synthetic)
        type: keyword
      additional_specifications[]:
        ^help.en: Additional information about the complex substance can be specified
          here
        type: keyword
      capsid_type:
        enum:
        - None
        - Native
        - Genetically Engineered
        - Synthetic
        - Other
        help.en: The type of virion capsid (e.g. genetically engineered, None
        type: keyword
      concentration:
        required: true
        use: '#/$defs/Concentration'
      derived_from:
        enum:
        - Body fluid
        - Cell fraction
        - Virion
        help.en: The biological substance the complex substance is derived from
        type: keyword
      description:
        help.en: Further description of the complex substance
        type: keyword
      envelope_type:
        enum:
        - None
        - Native
        - Genetically Engineered
        - Synthetic
        - Other
        help.en: The type of virion envelope (e.g. genetically engineered, None
        type: keyword
      host_cell_type:
        help.en: The host cell type the virion was produced in
        type: keyword
      host_organism:
        required: true
        use: '#/$defs/Organism'
      id:
        type: keyword
      name:
        help.en: Short descriptive name (id) of the constituent, must be unique within
          a record
        type: keyword
      organism:
        required: true
        use: '#/$defs/Organism'
      preparation_protocol[]:
        ^help.en: List of the steps performed during the preparation of the complex
          substance
        use: '#/$defs/Step'
      storage:
        use: '#/$defs/Storage'
      type:
        enum:
        - Polymer
        - Chemical
        - Molecular assembly
        - Complex substance of biological origin
        - Complex substance of environmental origin
        - Complex substance of chemical origin
        - Complex substance of industrial production origin
        help.en: The type of the constituent, options are Polymer, Chemical, and defined
          assembly
        type: keyword
  use:
  - ./definitions.yaml
record:
  module:
    qualified: mbdb.mst
  permissions:
    presets:
    - read_only
  pid-type: mst
  plugins:
    builder:
      disable:
      - script_sample_data
  properties:
    metadata:
      properties:
        general_parameters:
          required: true
          use: '#/$defs/General_parameters'
        method_specific_parameters:
          properties:
            data_analysis[]:
              ^help.en: Details of how the data was processed and model in order to
                derive parameters from it
              ^minItems: 1
              use: '#/$defs/MST_data_analysis'
            excitation_led_color:
              enum:
              - "RED (ex 605\u2013645nm, em 660\u2013730nm)"
              - "RED (ex 610\u2013645nm, em 680\u2013730nm)"
              - GREEN (ex 555-585nm, em 605-690nm)
              - GREEN (ex 515-550nm, em 565-600nm)
              - "BLUE (ex 480\u2013500nm, em 515\u2013550nm)"
              - "BLUE (ex 460\u2013500nm, em 515\u2013560nm)"
              - UV (ex 260-300nm, em 330-380nm)
              help.en: The color of the excitation LED used for the experiment
              type: keyword
            excitation_led_power:
              help.en: The power, in percentage, of the excitation LED used in experiment
              maximum: 100
              minimum: 0
              type: integer
            experiment_type:
              enum:
              - Affinity
              - Concentration
              - Other
              help.en: Type of physical parameter measured
              type: keyword
            ir_mst_laser_power:
              help.en: The power, in percentage, of the infrared LASER used in experiment
              maximum: 100
              minimum: 0
              type: integer
            label_free:
              help.en: Whether or not this was a label free type of experiment
              type: boolean
            measurements[]:
              ^help.en: List of the information about each measurement, including,
                target(s), ligand(s), chemical environment, and position of the sample
                within the instrument
              ^minItems: 0
              use: '#/$defs/Measurement'
            signal_type:
              enum:
              - Initial intensity
              - TRIC/MST
              - Spectral shift
              help.en: Which type of signal was measured
              type: keyword
        use: ./metadata.yaml
  use: invenio
settings:
  i18n-languages:
  - en
use:
- ./files.yaml
