import sqlalchemy_utils.types
import sqlalchemy_utils
#
# This file is part of Invenio.
# Copyright (C) 2016-2018 CERN.
#
# Invenio is free software; you can redistribute it and/or modify it
# under the terms of the MIT License; see LICENSE file for more details.

"""nrp install revision."""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '635cd166e4b1'
down_revision = '37ab32b96596'
branch_labels = ()
depends_on = None


def upgrade():
    """Upgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('mbdbmstfile_metadata',
    sa.Column('created', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'), nullable=False),
    sa.Column('updated', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('json', sa.JSON().with_variant(sqlalchemy_utils.types.json.JSONType(), 'mysql').with_variant(postgresql.JSONB(none_as_null=True, astext_type=sa.Text()), 'postgresql').with_variant(sqlalchemy_utils.types.json.JSONType(), 'sqlite'), nullable=True),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('key', sa.Text().with_variant(mysql.VARCHAR(length=255), 'mysql'), nullable=False),
    sa.Column('record_id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('object_version_id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=True),
    sa.ForeignKeyConstraint(['object_version_id'], ['files_object.version_id'], name=op.f('fk_mbdbmstfile_metadata_object_version_id_files_object'), ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['record_id'], ['mbdbmst_metadata.id'], name=op.f('fk_mbdbmstfile_metadata_record_id_mbdbmst_metadata'), ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_mbdbmstfile_metadata'))
    )
    op.create_index('uidx_mbdbmstfile_metadata_id_key', 'mbdbmstfile_metadata', ['id', 'key'], unique=True)
    op.add_column('mbdbmst_metadata', sa.Column('bucket_id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=True))
    op.create_foreign_key(op.f('fk_mbdbmst_metadata_bucket_id_files_bucket'), 'mbdbmst_metadata', 'files_bucket', ['bucket_id'], ['id'])
    op.add_column('mbdbmst_metadata_version', sa.Column('bucket_id', sqlalchemy_utils.types.uuid.UUIDType(), autoincrement=False, nullable=True))
    # ### end Alembic commands ###


def downgrade():
    """Downgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('mbdbmst_metadata_version', 'bucket_id')
    op.drop_constraint(op.f('fk_mbdbmst_metadata_bucket_id_files_bucket'), 'mbdbmst_metadata', type_='foreignkey')
    op.drop_column('mbdbmst_metadata', 'bucket_id')
    op.drop_index('uidx_mbdbmstfile_metadata_id_key', table_name='mbdbmstfile_metadata')
    op.drop_table('mbdbmstfile_metadata')
    # ### end Alembic commands ###
